{"version":3,"sources":["logo.svg","components/Mobile.js","components/Desktop.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Mobile","Desktop","App","state","width","window","innerWidth","userboundary","handleWindowSizeChange","setState","handleChangeWidth","e","value","currentTarget","prevState","addEventListener","this","removeEventListener","component","type","onChange","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mJAAAA,EAAOC,QAAU,IAA0B,kC,4ICM5BC,G,YAJA,WACX,OAAS,uCCGEC,EAJC,WACZ,OAAS,uC,gOCwDEC,E,2MA/CXC,MAAQ,CACAC,MAAOC,OAAOC,WACdC,aAAc,K,EAYtBC,uBAAyB,WACrB,EAAKC,SAAS,CAAEL,MAAOC,OAAOC,c,EAGlCI,kBAAoB,SAACC,GAAO,IAChBC,EAAUD,EAAEE,cAAZD,MACR,EAAKH,SAAS,SAACK,GACX,O,qVAAO,CAAP,GACOA,EADP,CAEIP,aAAeK,O,oFAlBvBP,OAAOU,iBAAiB,SAAUC,KAAKR,0B,6CAMvCH,OAAOY,oBAAoB,SAAUD,KAAKR,0B,+BAiBpC,IAGFU,EAHC,EAC0BF,KAAKb,MAA5BC,EADH,EACGA,MAAMG,EADT,EACSA,aAId,OADWW,EAFMd,GAASG,EAEH,kBAAC,EAAD,MAAwB,kBAAC,EAAD,MAE3C,kBAAC,WAAD,KACKH,EACAc,EACD,2BAAOC,KAAO,SAASC,SAAUJ,KAAKN,kBAAmBE,MAAQL,S,GAtC/Dc,aCCEC,QACW,cAA7BjB,OAAOkB,SAASC,UAEe,UAA7BnB,OAAOkB,SAASC,UAEhBnB,OAAOkB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.12686d0e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\n\r\nconst Mobile = () => {\r\n    return ( <p>Mobile</p> );\r\n}\r\n \r\nexport default Mobile;","import React from 'react';\r\n\r\nconst Desktop = () => {\r\n    return ( <p>Desktop</p> );\r\n}\r\n \r\nexport default Desktop;","import React, {Component, Fragment} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Mobile from './components/Mobile';\nimport Desktop from './components/Desktop';\n\n//stado que lea el with de la pantalla\n//hacer dos componentes una movil y una desktop\n//dependiendo del estado renderiza una u ota\n//subirlo a github\n\nclass App extends Component {\n    state = { \n            width: window.innerWidth ,\n            userboundary: 500\n        }\n    componentWillMount() {\n        window.addEventListener('resize', this.handleWindowSizeChange);\n    }\n    \n    // make sure to remove the listener\n    // when the component is not mounted anymore\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handleWindowSizeChange);\n    }\n\n    handleWindowSizeChange = () => {\n        this.setState({ width: window.innerWidth });\n    };\n\n    handleChangeWidth = (e) => {\n        const { value } = e.currentTarget\n        this.setState((prevState)=>{\n            return {\n                ...prevState,\n                userboundary : value\n            }\n        })\n    }\n    \n    render() { \n        const { width,userboundary } = this.state;\n        const isMobile = width <= userboundary;\n        let component;\n        isMobile ? component = <Mobile /> : component= <Desktop />\n        return (\n            <Fragment >\n                {width }\n                {component}\n                <input type = \"number\" onChange={this.handleChangeWidth} value= {userboundary}/>\n            </Fragment>\n        )\n        // if (isMobile)\n        //     return <Mobile />\n        // else \n        //     return <Desktop />\n    }\n}\n \nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}